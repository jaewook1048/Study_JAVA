java.lang
- 자바의 기본이 되는 클래스를 보관하는 패키지 

Object
- 최상위 부모 클래스 (공통 기능 제공, 다형성의 기본 구현/모든 객체 참조 가능)
- toString() / 객체의 정보를 문자열 형태로 제공
- equals() / 두 객체가 논리적으로 동등한지 비교

불변 객체
- 공유 참조로 인한 사이드 이펙트 문제를 해결하려고 나옴 (참조 변수에서 값을 변경했을 때 사이드 이펙트 발생)
- 객체의 상태(멤버 변수, 필드)가 변하지 않는 객체 (값을 변경하면 안되는 경우에 사용)
- 불변 객체의 필드 값을 변경하고 싶을 땐 변경 값으로 새로운 객체 생성해서 반환시키면 된다.
- 단점 : 객체가 계속 생성됨 (값이 변경 될 경우)

String
- String 객체는 멤버 변수가 char[](java 9 이전), byte[](java 9 이후)인 형태를 가진다.
    * String 객체는 char[]을 이용하여 편리하게 문자열을 다룰 수 있게 해줌
- 자바는 클래스 로딩이 될 때 문자열 리터럴들을 전부 문자열(String) 풀에다가 String 인스턴스로 생성 시킨다. 
    * 같은 문자를 사용하는 경우 메모리 절약 (같은 문자열 리터럴은 생성 X)
    * 문자열 풀은 힙 영역 사용
    * 문자열 풀에서 문자열을 찾을 땐 해시 알고리즘 사용
- 문자열 비교는 항상 equals() 사용 (new 로 생성되서 넘어온건지 문자열 리터럴로 대입된게 넘어오는지 모르기 때문)
- 불변 객체인 이유는 문자열 풀을 통해서 공유 참조를 하기 때문에 사이드 이펙트 방지하려고

String 메서드
- 너무 많음 필요한건 구글링으로 통해서 찾기

StringBuilder
- 불변인 String을 자주 변경하면 메모리 낭비가 된다. 그래서 문자열을 자주 변경할 경우 가변인 StringBuilder을 사용하면 된다.

StringBuilder vs StringBuffer
StringBuffer는 내부에 동기화가 되어 있어서, 멀티 스레드 상황에 안전하지만 동기화 오버헤드로 인하여 성능이 느리다.

String 최적화
- 자바는 문자열 리터럴 더하기를 컴파일에서 자동으로 합쳐준다.(런타임 시점 X)
- 아래는 전부 StringBuilder 사용한다. (최적화)
    - 반복문 안에서 문자열 더하기를 진행할 때
    - 조건문을 통해 동적으로 문자열 조합할 때 
    - 복잡한 문자열의 특정 부분 변경할 때
    - 대용량 문자열일 때

메서드 체이닝
- 메서드 호출 시 반환 값으로 자신의 참조값을 반환하면 메소드 체이닝을 사용 가능
- 반환된 참조값을 즉시 메소드 호출해서 사용한 경우
    ex) add(1).add(2)

래퍼 클래스
- 기본형을 객체로 만든 버전 (기본형을 객체로 쓸 수 있다.)
- 불변형이다.
- 용어 박싱 (기본형 -> 래퍼 클래스), 언박싱(래퍼 클래스 -> 기본형) 
- 오토 박싱/오토 언박싱이 된다. (기본형 <-> 래퍼클래스로 전환할 때 묵시적으로 전환된다.)
- 주요 메서드
    valueOf(래퍼형 반환), parseInt(문자열을 기본형으로 변환), compareTo(내 값과 인수로 넘어온 값 비교)
- 래퍼 클래스는 기본형보다 더 다양한 메서드드을 지원
    그럼에도 기본형을 쓰는 이유는 연산 속도가 기본형이 더 삐르다.
    래퍼 클래스는 기본형보다 메모리를 더 사용한다. (5배 차이)

유지보수 vs 최적화
- 유지보수하기 좋은 코드가 우선이다.

Class 클래스
- 클래스들의 메타 정보를 가져올 수 있는 클래스

System 클래스
- 시스템과 관련된 기본 기능들을 제공한다.

Math 클래스 