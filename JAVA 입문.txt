JAVA 란
- main 메소드는는 모든 클래스들의 시작점
- 주석은 소스코드 설명을 달거나 사용하지 않은 코드에다 사용 (자바에서 무시함)
- 소스코드 -> 컴파일 -> 실행
- 컴파일 단계에서 소스 코드가 바이트 코드로 변하고 JVM에서 실행될때 더욱더 빠르게 실행되기 위해 최적화하고 문법에러도 고쳐준다.
- javac가 컴파일하고 java가 실행되면 JVM이 실제로 메모리에 올라가서 클래스를 읽고 실행함
- IDE는 컴파일과 실행을 자동화시켜줌
- 자바는 어느 OS에서든 자바만 설치되어 있으면 프로그램 실행 가능 (운영체제의 독립성)
- 패키지란 폴더 개념으로 클래스들의 묶음이다. 주로 공통된 클래스들 묶는다.

변수 란
- 데이터를 담는 그릇
- 필요한 데이터를 담아서 언제든지 꺼내서 읽어올 수 있다 (하드코딩 불 필요)
- 변수의 선언이란 메모리에 변수가 저장될 공간을 확보한다.
- 변수의 초기화란 처음으로 변수의 값 대입하는 걸 의미
- 변수를 초기화하지 않고 사용하면 에러가난다. 가비지 값이 들어있어서 그렇다. (메모리 공간은 모든 시스템이 사용하기 때문에 다른 시스템이 남겨논 데이터 흔      적이 있음)
- 자바는 변수 초기화를 강제로 한다. (위에 이유 때문)
- 리터럴이란 변수에 대입되는 문자나 숫자 true, false 등의 데이터를 의미 
- 리터럴은 변하지 않음

연산자
- 연산자란 연산 기호
- 피연산자란 연사 대상
- 자바는 0 나누기 불가능 (예외 발생)
- 자바는 문자열 더하기 가능 (+ 연산자 사용)
- 자바는 문자열과 더하는 다른 대상을 문자열로 바꿔버린다.
- 증감 연산자는 값을 하나 증가하거나 감소할 때 사용
- 논리 연산자는 true/false를 비교할 때 사용

조건문
- 특정 조건에 따라서 다른 코드를 실행하는 것
- else if 문 사용이유 -> 불필요한 중복 체크를 줄이고 if문을 하나로 묶어서 코드 효율성 상승
- 독립적인 조건일때는 else if 사용 불 필요
- switch 비교문은 값으로 비교할 때 사용

반복문
- 조건에 따른 반복문 while
- for문은 반복 횟수가 정해져 있을 때 사용
- do-while은 조건에 맞지 않아도 한번은 무조건 실행
- break -> 반복문 블럭 밖으로 탈출
- continue -> 다음 반복 실행 탈출 x

스코프
- 지역 변수란 자신이 선언된 범위(블록)안에서만 사용 가능한 변수
- 스코프란 변수의 접근 가능 범위이다.
- 스코프를 잘 사용 못할경우
    1. 비효율적인 메모리 사용 (사용하지 않는 범위에서도 메모리를 잡고 있음)
    2. 코드 복잡도 증가 (해당 변수를 사용범위 외에도 생각해야함)
- 스코프 범위는 필요한 곳으로 한정해서 지정하자 (메모리 효율 상승)

형변환
- 자동 형변환 -> 작은 범위에서 큰 범위로 이동
- 명시적 형변환 -> 큰 범위에서 작은범위로 이동
- 오버 플로우란 데이터 타입의 범위를 초과해서 넣게되면 데이터가 다르게 바뀜
- 명시적 형변환시 오버 플로우 조심


리펙토링
- 기존 기능은 유지하면서 내부 구조만 변경하는 작업 (가독성 up, 유지보수성 up)

배열
- 같은 타입의 변수들을 사용하기 편하게 묶어둔 것
- 자바는 배열을 new 연산자로 생성할 때 요소 값을 자동으로 초기화 해준다.
- new 연산자로 배열을 생성하면 배열을 참조할 수 있는 주소 값을 반환하고 그걸 배열 변수에 담아서 사용한다.
- 배열의 순번을 인덱스라고 함
- 기본형 타입 : 직접 사용할 수 있는 값을 가지고 있음
- 참조형 타입 : 참조 값(주소)을 가지고 있음
- 기본형은 메모리 사이즈가 고정되어 있고 참조형은 동적으로 사이즈가 변경될 수 있다.
- 향상된 for문은 배열의 요소를 하나하나 꺼내서 사용할 때 편리

메서드
- 자바에서는 함수를 메서드라고 부름
- 메서드는 선언 부분과 본문 부분으로 나눌 수 있음
- 메서도 호출 시 메모리 공간이 할당됨
- 메서드 호출이 끝나면 매개 변수와 반환 값은 메모리에서 사라진다.
- 메소드 호출 시 넘기는 실제 값을 인수/아규먼트 라고 한다.
- 매개 변수란 입력 값으로, 메소드를 정의할 때 내부에서 사용할 수 있는 변수들을 의미한다.
- 메서드 오버로딩이란 메서드의 이름이 같고 매개변수가 다른 메서드를 의미한다. (메서드 중첩)
    * 단 반환 타입만 다른것은 오버로딩으로 인정하지 않는다.
- 메서드 시그니처 = 메서드 이름 + 매개변수 타입 (순서)
- 메소드 사용 이유는 재사용성도 있지만 메소드를 사용하면 한눈에 무슨 기능인지 알 수 있어서
  가독성이 좋고 유지보수성이 좋다.

