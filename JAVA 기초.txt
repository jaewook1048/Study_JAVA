클래스
- 클래스란 객체의 설계도이다. (사용자 정의 타입)
- 멤버변수/필드란 클래스에 소속된 변수를 뜻한다. (객체의 속성을 의미)
- 클래스가 생성되어 메모리에 올라간 것을 인스턴스라고한다.
- 클래스가 생성될 때 클래스의 멤버 변수들의 메모리 공간도 확보한다.
- 객체에 접근하려면 . 키워드를 사용

객체/인스턴스
- 클래스에서 정의한 속성과 기능을 가진 실체 서로 독립적인 상태를 가짐
- 서로 독립적인 상태를 가짐 (같은 클래스타입으로 생성되어도 다른 객체)

기본형 vs 참조형
- 기본형이란 변수에 실제로 사용하는 값을 직접 넣는 변수
- 참조형이란 객체의 주소값을 넣는 변수 (객체,배열)
- 기본형은 수동 초기화
- 참조형은 자동 초기화 (초기값을 생성자로 설정할 수도 있고 , 자동으로 숫자 =0, boolean= false, 참조 = null)

null
- 참조 값이 없다는걸 의미

NullPointerException
- 참조 값 없이 객체에 접근할 경우 (null을 가진 참조 변수에 .으로 접근할 경우)

GC
- 인스턴스를 아무도 참조하지 않으면 GC가 자동으로 메모리에서 제거한다.

절차 지향 프로그래밍
- 프로그램의 흐름을 순차적으로 따르며 처리하는 방식

객체 지향 프로그래밍
- 객체들간의 상호작용을 중심으로 프로그래밍 하는 방식
 
절차 지향고 객체 지향의 차이점
- 절차는 데이터와 데이터 처리 방식이 분리되어있다.
- 객체는 데이터와 데이터에 대한 행동(메서드)가 하나의 객체안에 있다.

모듈화
- 레고 블록 처럼 기능을 분리를 하여 필요할때 마다 호출

캡슐화
- 멤버 변수와 메서드를 하나로 묶어서 외부의 접근을 제한하는 것
- 외부에는 꼭 필요한 기능만 제공하고 나머진 숨김(주로 멤버 변수 접근 숨김)

생성자
- 객체를 생성 직후에 작업을 하고 싶을 때 생성자 이용
- 멤버 변수 초기값 세팅할 때 많이 사용
- this() 사용하면 생성자에서 생성자 호출 가능(생성자 블록 첫 라인에서만 사용가능)

this
- 자기 자신의 인스턴스 참조 값을 가리킴 

패키지
- 패키지란 폴더 개념으로 클래스들의 묶음이다. 주로 관련된 클래스들 묶는다.

접근 제어자
- private : 모든 외부 호출을 막음
- default : 같은 패치키안에서 호출 허용
- protected : 같은 패치키안에서 호출 허용, 패키지 달라도 상속 관계도 허용
- public : 모든 외부 호출 허용
- 접근 제어자의 핵심은 외부로 부터 멤버나 메서드를 숨길 때 사용
- 클래스, 생성자, 멤버변수, 메서드에만 사용
- 클래스 레벨 접근 제어자는 public, default만 사용가능 (public이면 파일 명과 이름이 같아야함)

자바 메모리 구조
- 메서드 영역 : 프로그램에서 실행하는 공통 데이터를 관리
    * 클래스 정보 : 클래스 정보(바이트 코드), 필드 , 메서드와 생성자 코드등 모든 실행 코드 존재
    * static 영역 : static 변수 보관
    * 런타임 상수 풀 : 프로그램에서 실행하는데 필요한 공통 리터럴 상수를 보관

- 스택 영역 : 실제 프로그램이 실행되는 영역, 메서드를 실행할 때 마다 하나씩 쌓인다.
    * 메서드 호출 시 스택 프레임이 쌓임
    * 스택 프레임에는 지역 변수, 메서드 중간 연산 결과, 메서드 호출 정보 내포
    * 자바는 호출할 메서드가 없고 스택 프레임이 없으면 프로그램 종료

- 힙 영역 : 객체와 배열이 생성되는 영역 GC가 이루어지는 주요 영역
    * 인스턴스 필드는 메모리 할당이 되지만 인스턴스 메서드는 메서드 영역에서 가져온다.

자료구조
-데이터를 어떤식으로 보관하고 관리하는지에 대한 구조
-스택(LIFO)
 마지막에 넣은게 맨처음으로 나오는 자료구조
 -큐(FIFO)
 먼저 넣은게 먼저 나오는 자료구조

 변수 생명 주기
- 지역 변수(매개 변수) : 스택 영역 사용,
    스택 프레임에서 보관, 메서드 호출 종료시 스택 프레임 제거 되는데 같이 제거됨

- 인스턴스 변수 : 힙 영역 사용,
    GC가 발생하기 전까진 계속 생존

- 클래스 변수 : 메서드 영역 사용,
    static 변수로서 클래스 변수는 해당 클래스가 JVM 로딩 되는 순간 생성 그리고
    JVM 종료 시점 까지 생존

static 변수(정적 변수, 클래스 변수)
- static 키워드를 사용하면 공용으로 함께 사용할 수 있는 변수 생성 가능
- static 변수는 클래스 변수로서 자바가 실행되서 클래스 로딩될 때 하나만 생성이 된다. 
- 주로 멤버 변수와 메서드에 사용

static 메서드
- 객체 생성 없이 호출 가능 (불 필요한 객체 생성 X)
- static 메서드는 static만 사용 가능 (인스턴스 변수 or 메서드는 사용 불가 / 참조 값이 없기 때문)
- 위와 반대로 모든 곳에서는 static 호출 가능 (공용 메서드이기 때문)

final
- final 변수는 최초 한번만 초기화 가능
- 멤버 변수는 생성자를 통해서도 할당 가능
- 자바에선 하나만 존재하는 고정된 값을 상수라고 한다. (static final)
- 상수는 중앙에서 관리하고 여러군데에서 참조에서 사용할때 유용하다.

상속
- 부모 클래스의 멤버변수와 메서드를 자식 클래스가 사용 가능
- 다중 상속 불가 (클래스 계층 구조가 복잡해짐), (여러 부모가 같은 메서드 가지고 있으면 문제 발샐)
- 자식 클래스가 생성되면 부모 클래스도 같이 생성된다. (하나의 참조값에 두개의 인스턴스 생성)
- 호출되는 변수의 타입 기준으로 메서드 호출(본인 타입에 없으면 부모 타입에서 찾음)
- 부모에게 받은 기능을 자식이 재정의 하는것을 오버라이딩
- super 키워드는 부모 클래스의 참조를 의미
- 자식 생성자에서 부모 생성자를 호출한다.
- 공통적인 부분은 부모 클래스에서 정의하고 독립적인 기능을 자식에서 확장한다.

다운 캐스팅
- 부모 타입에서 자식 타입으로 형을 변환 시키는 것을 다운 캐스팅이라고 한다.
- 그 반대는 업 캐스팅 (자식 -> 부모)
- 다운 캐스팅은 런타임 에러를 낼 수가 있어서 조심해야한다. (부모 객체로만 생성해서 메모리에는
  부모 객체만 있는데 다운 캐스팅 시도 시 에러 ClassCastException)
- 업 캐스팅은 묵시적으로 되는 이유는 자식 생성시 부모도 자동적으로 생성되기 때문
- instanceof 를 이용하여 인스턴스 타입을 확인하여 다운 캐스팅 진행을 하면된다.
    instanceof는 왼쪽 타입이 오른쪽 타입에 들어갈 수 있으면 true 아니면 false 반환

다형성 (다형적 참조, 메서드 오버라이딩)
- 여러 인스턴스를 하나의 타입으로 생성 가능 (중복 코드 제거, 변경 부위 최소화) ※중요
- 호출 시점에 인스턴스에 있는 오버라이딩 메서드가 호출되어 하나의 코드에서 다양한 기능이 나옴
- 다형적 참조
    * 하나의 참조 변수가 다양한 하위 인스턴스를 참조할 수 있다.(다형적 참조)
- 메서드 오버라이딩
    * 기존 기능을 하위 타입에서 재정의
    * 더 하위 자식의 오버라이딩된 메서드가 우선권을 가진다. 


추상 클래스
- 추상적인 개념 클래스로 상속을 목적으로 사용되는 클래스 (인스턴스 생성 불가)

추상 메서드
- 자식 클래스가 반드시 재정의해야 하는 메서드
- 실체가 존재하지 않은 메서드로서 바디가 존재하지 않는다.
- 클래스에 하나라도 추상 메서드가 있다면 추상 클래스로 선언 해야한다.

인터페이스
- 규격이 있고 구현체는 그 규격을 따라야한다.
- 다형성을 위해 사용한다.
- public abstarct 생략가능
- 멤버 변수는 모두 상수다.
- 다중 구현 가능 (여러 인터페이스가 같은 메서드가 추상 메서드여서 본인이 무조건 구현을 해서 문제 x)

상속 vs 구현
- 상속은 부모에 기능을 자식에게 물려줌
- 구현은 기능을 직접 자기가 구현해야함 (물려받는게 없다.)

좋은 객체 지향
- 유연하고 변경에 용이한 프로그래밍 (다형성)
    * 레고 블럭을 조립하듯 컴포넌트를 쉽고 유연하게 변경하면서 개발하는 프로그래밍
- 역할과 구현을 구분
    * 구현체가 변경된다해도 클라이언트 코드는 변경이 없음 (구현체는 인터페이스 규격을 따르기 때문)
- 클라이언트는 인터페이스 사용법만 알면 모든 구현체를 사용할 수 있다.
- 안정적으로 인터페이스를 설계하는 것이 중요

OCP
- 확장에는 열려있고 변경에는 닫혀있다. (확장 = 구현체 추가, 변경x = 클라이언트 코드는 변경 x)
- 자바 다형성을 활용, 인터페이스와 구현체를 나누어서 개발하는 방식 (전략 패턴)
- 변하지 않는 부분 -> 클라이언트 코드
- 변하는 부분 -> 새로운 구현체를 생성하고 의존성을 주입해 주는 부분
